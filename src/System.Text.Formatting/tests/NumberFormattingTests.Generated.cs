// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

// THIS FILE IS AUTOGENERATED

using System;
using System.Globalization;
using Xunit;

namespace System.Text.Formatting.Tests
{
    public partial class SystemTextFormattingTests
    {
        public void CheckByte(Byte value, string format)
        {
            var parsed = Format.Parse(format);
            formatter.Clear();
            formatter.Append(value, parsed);
            var result = formatter.ToString();
            var clrResult = value.ToString(format, CultureInfo.InvariantCulture);
            Assert.Equal(clrResult, result);
        }
        
        [Fact]
        public void ByteFormatD()
        {
            
            // format D
            CheckByte(Byte.MinValue, "D");
            CheckByte(Byte.MaxValue, "D");
            CheckByte(0, "D");
            CheckByte(38, "D");
            CheckByte(60, "D");
            CheckByte(192, "D");
            CheckByte(0, "D");
            CheckByte(176, "D");
            
            // format D0
            CheckByte(Byte.MinValue, "D0");
            CheckByte(Byte.MaxValue, "D0");
            CheckByte(0, "D0");
            CheckByte(116, "D0");
            CheckByte(245, "D0");
            CheckByte(32, "D0");
            CheckByte(177, "D0");
            CheckByte(6, "D0");
            
            // format D1
            CheckByte(Byte.MinValue, "D1");
            CheckByte(Byte.MaxValue, "D1");
            CheckByte(0, "D1");
            CheckByte(5, "D1");
            CheckByte(46, "D1");
            CheckByte(21, "D1");
            CheckByte(184, "D1");
            CheckByte(243, "D1");
            
            // format D2
            CheckByte(Byte.MinValue, "D2");
            CheckByte(Byte.MaxValue, "D2");
            CheckByte(0, "D2");
            CheckByte(140, "D2");
            CheckByte(56, "D2");
            CheckByte(253, "D2");
            CheckByte(190, "D2");
            CheckByte(132, "D2");
            
            // format D3
            CheckByte(Byte.MinValue, "D3");
            CheckByte(Byte.MaxValue, "D3");
            CheckByte(0, "D3");
            CheckByte(175, "D3");
            CheckByte(47, "D3");
            CheckByte(254, "D3");
            CheckByte(96, "D3");
            CheckByte(179, "D3");
            
            // format D4
            CheckByte(Byte.MinValue, "D4");
            CheckByte(Byte.MaxValue, "D4");
            CheckByte(0, "D4");
            CheckByte(180, "D4");
            CheckByte(178, "D4");
            CheckByte(75, "D4");
            CheckByte(193, "D4");
            CheckByte(112, "D4");
            
            // format D5
            CheckByte(Byte.MinValue, "D5");
            CheckByte(Byte.MaxValue, "D5");
            CheckByte(0, "D5");
            CheckByte(93, "D5");
            CheckByte(219, "D5");
            CheckByte(107, "D5");
            CheckByte(15, "D5");
            CheckByte(209, "D5");
        }
        
        [Fact]
        public void ByteFormatd()
        {
            
            // format d
            CheckByte(Byte.MinValue, "d");
            CheckByte(Byte.MaxValue, "d");
            CheckByte(0, "d");
            CheckByte(25, "d");
            CheckByte(96, "d");
            CheckByte(224, "d");
            CheckByte(151, "d");
            CheckByte(193, "d");
            
            // format d0
            CheckByte(Byte.MinValue, "d0");
            CheckByte(Byte.MaxValue, "d0");
            CheckByte(0, "d0");
            CheckByte(51, "d0");
            CheckByte(137, "d0");
            CheckByte(67, "d0");
            CheckByte(111, "d0");
            CheckByte(36, "d0");
            
            // format d1
            CheckByte(Byte.MinValue, "d1");
            CheckByte(Byte.MaxValue, "d1");
            CheckByte(0, "d1");
            CheckByte(110, "d1");
            CheckByte(142, "d1");
            CheckByte(31, "d1");
            CheckByte(214, "d1");
            CheckByte(99, "d1");
            
            // format d2
            CheckByte(Byte.MinValue, "d2");
            CheckByte(Byte.MaxValue, "d2");
            CheckByte(0, "d2");
            CheckByte(150, "d2");
            CheckByte(106, "d2");
            CheckByte(96, "d2");
            CheckByte(54, "d2");
            CheckByte(108, "d2");
            
            // format d3
            CheckByte(Byte.MinValue, "d3");
            CheckByte(Byte.MaxValue, "d3");
            CheckByte(0, "d3");
            CheckByte(246, "d3");
            CheckByte(60, "d3");
            CheckByte(96, "d3");
            CheckByte(75, "d3");
            CheckByte(250, "d3");
            
            // format d4
            CheckByte(Byte.MinValue, "d4");
            CheckByte(Byte.MaxValue, "d4");
            CheckByte(0, "d4");
            CheckByte(193, "d4");
            CheckByte(170, "d4");
            CheckByte(93, "d4");
            CheckByte(64, "d4");
            CheckByte(168, "d4");
            
            // format d5
            CheckByte(Byte.MinValue, "d5");
            CheckByte(Byte.MaxValue, "d5");
            CheckByte(0, "d5");
            CheckByte(41, "d5");
            CheckByte(193, "d5");
            CheckByte(6, "d5");
            CheckByte(230, "d5");
            CheckByte(217, "d5");
        }
        
        [Fact]
        public void ByteFormatG()
        {
            
            // format G
            CheckByte(Byte.MinValue, "G");
            CheckByte(Byte.MaxValue, "G");
            CheckByte(0, "G");
            CheckByte(43, "G");
            CheckByte(87, "G");
            CheckByte(101, "G");
            CheckByte(251, "G");
            CheckByte(81, "G");
        }
        
        [Fact]
        public void ByteFormatX()
        {
            
            // format X
            CheckByte(Byte.MinValue, "X");
            CheckByte(Byte.MaxValue, "X");
            CheckByte(0, "X");
            CheckByte(37, "X");
            CheckByte(234, "X");
            CheckByte(142, "X");
            CheckByte(60, "X");
            CheckByte(69, "X");
            
            // format X0
            CheckByte(Byte.MinValue, "X0");
            CheckByte(Byte.MaxValue, "X0");
            CheckByte(0, "X0");
            CheckByte(38, "X0");
            CheckByte(146, "X0");
            CheckByte(116, "X0");
            CheckByte(94, "X0");
            CheckByte(217, "X0");
            
            // format X1
            CheckByte(Byte.MinValue, "X1");
            CheckByte(Byte.MaxValue, "X1");
            CheckByte(0, "X1");
            CheckByte(241, "X1");
            CheckByte(123, "X1");
            CheckByte(52, "X1");
            CheckByte(161, "X1");
            CheckByte(217, "X1");
            
            // format X2
            CheckByte(Byte.MinValue, "X2");
            CheckByte(Byte.MaxValue, "X2");
            CheckByte(0, "X2");
            CheckByte(219, "X2");
            CheckByte(0, "X2");
            CheckByte(149, "X2");
            CheckByte(156, "X2");
            CheckByte(0, "X2");
            
            // format X3
            CheckByte(Byte.MinValue, "X3");
            CheckByte(Byte.MaxValue, "X3");
            CheckByte(0, "X3");
            CheckByte(136, "X3");
            CheckByte(44, "X3");
            CheckByte(3, "X3");
            CheckByte(198, "X3");
            CheckByte(250, "X3");
            
            // format X4
            CheckByte(Byte.MinValue, "X4");
            CheckByte(Byte.MaxValue, "X4");
            CheckByte(0, "X4");
            CheckByte(171, "X4");
            CheckByte(136, "X4");
            CheckByte(56, "X4");
            CheckByte(251, "X4");
            CheckByte(55, "X4");
            
            // format X5
            CheckByte(Byte.MinValue, "X5");
            CheckByte(Byte.MaxValue, "X5");
            CheckByte(0, "X5");
            CheckByte(63, "X5");
            CheckByte(4, "X5");
            CheckByte(99, "X5");
            CheckByte(228, "X5");
            CheckByte(70, "X5");
        }
        
        [Fact]
        public void ByteFormatx()
        {
            
            // format x
            CheckByte(Byte.MinValue, "x");
            CheckByte(Byte.MaxValue, "x");
            CheckByte(0, "x");
            CheckByte(12, "x");
            CheckByte(173, "x");
            CheckByte(36, "x");
            CheckByte(6, "x");
            CheckByte(212, "x");
            
            // format x0
            CheckByte(Byte.MinValue, "x0");
            CheckByte(Byte.MaxValue, "x0");
            CheckByte(0, "x0");
            CheckByte(46, "x0");
            CheckByte(54, "x0");
            CheckByte(254, "x0");
            CheckByte(102, "x0");
            CheckByte(182, "x0");
            
            // format x1
            CheckByte(Byte.MinValue, "x1");
            CheckByte(Byte.MaxValue, "x1");
            CheckByte(0, "x1");
            CheckByte(173, "x1");
            CheckByte(141, "x1");
            CheckByte(99, "x1");
            CheckByte(12, "x1");
            CheckByte(252, "x1");
            
            // format x2
            CheckByte(Byte.MinValue, "x2");
            CheckByte(Byte.MaxValue, "x2");
            CheckByte(0, "x2");
            CheckByte(43, "x2");
            CheckByte(193, "x2");
            CheckByte(200, "x2");
            CheckByte(250, "x2");
            CheckByte(200, "x2");
            
            // format x3
            CheckByte(Byte.MinValue, "x3");
            CheckByte(Byte.MaxValue, "x3");
            CheckByte(0, "x3");
            CheckByte(248, "x3");
            CheckByte(231, "x3");
            CheckByte(199, "x3");
            CheckByte(64, "x3");
            CheckByte(152, "x3");
            
            // format x4
            CheckByte(Byte.MinValue, "x4");
            CheckByte(Byte.MaxValue, "x4");
            CheckByte(0, "x4");
            CheckByte(157, "x4");
            CheckByte(90, "x4");
            CheckByte(119, "x4");
            CheckByte(38, "x4");
            CheckByte(153, "x4");
            
            // format x5
            CheckByte(Byte.MinValue, "x5");
            CheckByte(Byte.MaxValue, "x5");
            CheckByte(0, "x5");
            CheckByte(236, "x5");
            CheckByte(23, "x5");
            CheckByte(78, "x5");
            CheckByte(91, "x5");
            CheckByte(205, "x5");
        }
        
        public void CheckSByte(SByte value, string format)
        {
            var parsed = Format.Parse(format);
            formatter.Clear();
            formatter.Append(value, parsed);
            var result = formatter.ToString();
            var clrResult = value.ToString(format, CultureInfo.InvariantCulture);
            Assert.Equal(clrResult, result);
        }
        
        [Fact]
        public void SByteFormatD()
        {
            
            // format D
            CheckSByte(SByte.MinValue, "D");
            CheckSByte(SByte.MaxValue, "D");
            CheckSByte(0, "D");
            CheckSByte(-82, "D");
            CheckSByte(91, "D");
            CheckSByte(14, "D");
            CheckSByte(71, "D");
            CheckSByte(81, "D");
            
            // format D0
            CheckSByte(SByte.MinValue, "D0");
            CheckSByte(SByte.MaxValue, "D0");
            CheckSByte(0, "D0");
            CheckSByte(-46, "D0");
            CheckSByte(-84, "D0");
            CheckSByte(27, "D0");
            CheckSByte(-112, "D0");
            CheckSByte(-52, "D0");
            
            // format D1
            CheckSByte(SByte.MinValue, "D1");
            CheckSByte(SByte.MaxValue, "D1");
            CheckSByte(0, "D1");
            CheckSByte(-98, "D1");
            CheckSByte(-92, "D1");
            CheckSByte(-85, "D1");
            CheckSByte(126, "D1");
            CheckSByte(-116, "D1");
            
            // format D2
            CheckSByte(SByte.MinValue, "D2");
            CheckSByte(SByte.MaxValue, "D2");
            CheckSByte(0, "D2");
            CheckSByte(-3, "D2");
            CheckSByte(-69, "D2");
            CheckSByte(-25, "D2");
            CheckSByte(-100, "D2");
            CheckSByte(-51, "D2");
            
            // format D3
            CheckSByte(SByte.MinValue, "D3");
            CheckSByte(SByte.MaxValue, "D3");
            CheckSByte(0, "D3");
            CheckSByte(-93, "D3");
            CheckSByte(100, "D3");
            CheckSByte(98, "D3");
            CheckSByte(-19, "D3");
            CheckSByte(-74, "D3");
            
            // format D4
            CheckSByte(SByte.MinValue, "D4");
            CheckSByte(SByte.MaxValue, "D4");
            CheckSByte(0, "D4");
            CheckSByte(82, "D4");
            CheckSByte(61, "D4");
            CheckSByte(88, "D4");
            CheckSByte(75, "D4");
            CheckSByte(72, "D4");
            
            // format D5
            CheckSByte(SByte.MinValue, "D5");
            CheckSByte(SByte.MaxValue, "D5");
            CheckSByte(0, "D5");
            CheckSByte(21, "D5");
            CheckSByte(-66, "D5");
            CheckSByte(-120, "D5");
            CheckSByte(-67, "D5");
            CheckSByte(78, "D5");
        }
        
        [Fact]
        public void SByteFormatd()
        {
            
            // format d
            CheckSByte(SByte.MinValue, "d");
            CheckSByte(SByte.MaxValue, "d");
            CheckSByte(0, "d");
            CheckSByte(-50, "d");
            CheckSByte(-78, "d");
            CheckSByte(-127, "d");
            CheckSByte(-87, "d");
            CheckSByte(-11, "d");
            
            // format d0
            CheckSByte(SByte.MinValue, "d0");
            CheckSByte(SByte.MaxValue, "d0");
            CheckSByte(0, "d0");
            CheckSByte(75, "d0");
            CheckSByte(-53, "d0");
            CheckSByte(55, "d0");
            CheckSByte(115, "d0");
            CheckSByte(-7, "d0");
            
            // format d1
            CheckSByte(SByte.MinValue, "d1");
            CheckSByte(SByte.MaxValue, "d1");
            CheckSByte(0, "d1");
            CheckSByte(-8, "d1");
            CheckSByte(-81, "d1");
            CheckSByte(-8, "d1");
            CheckSByte(-103, "d1");
            CheckSByte(-100, "d1");
            
            // format d2
            CheckSByte(SByte.MinValue, "d2");
            CheckSByte(SByte.MaxValue, "d2");
            CheckSByte(0, "d2");
            CheckSByte(48, "d2");
            CheckSByte(47, "d2");
            CheckSByte(-78, "d2");
            CheckSByte(-114, "d2");
            CheckSByte(41, "d2");
            
            // format d3
            CheckSByte(SByte.MinValue, "d3");
            CheckSByte(SByte.MaxValue, "d3");
            CheckSByte(0, "d3");
            CheckSByte(-56, "d3");
            CheckSByte(120, "d3");
            CheckSByte(-95, "d3");
            CheckSByte(16, "d3");
            CheckSByte(125, "d3");
            
            // format d4
            CheckSByte(SByte.MinValue, "d4");
            CheckSByte(SByte.MaxValue, "d4");
            CheckSByte(0, "d4");
            CheckSByte(19, "d4");
            CheckSByte(-45, "d4");
            CheckSByte(78, "d4");
            CheckSByte(-58, "d4");
            CheckSByte(54, "d4");
            
            // format d5
            CheckSByte(SByte.MinValue, "d5");
            CheckSByte(SByte.MaxValue, "d5");
            CheckSByte(0, "d5");
            CheckSByte(95, "d5");
            CheckSByte(-100, "d5");
            CheckSByte(108, "d5");
            CheckSByte(-81, "d5");
            CheckSByte(60, "d5");
        }
        
        [Fact]
        public void SByteFormatG()
        {
            
            // format G
            CheckSByte(SByte.MinValue, "G");
            CheckSByte(SByte.MaxValue, "G");
            CheckSByte(0, "G");
            CheckSByte(-54, "G");
            CheckSByte(-71, "G");
            CheckSByte(-67, "G");
            CheckSByte(37, "G");
            CheckSByte(0, "G");
        }
        
        [Fact]
        public void SByteFormatX()
        {
            
            // format X
            CheckSByte(SByte.MinValue, "X");
            CheckSByte(SByte.MaxValue, "X");
            CheckSByte(0, "X");
            CheckSByte(87, "X");
            CheckSByte(-83, "X");
            CheckSByte(110, "X");
            CheckSByte(114, "X");
            CheckSByte(61, "X");
            
            // format X0
            CheckSByte(SByte.MinValue, "X0");
            CheckSByte(SByte.MaxValue, "X0");
            CheckSByte(0, "X0");
            CheckSByte(35, "X0");
            CheckSByte(-59, "X0");
            CheckSByte(62, "X0");
            CheckSByte(46, "X0");
            CheckSByte(-104, "X0");
            
            // format X1
            CheckSByte(SByte.MinValue, "X1");
            CheckSByte(SByte.MaxValue, "X1");
            CheckSByte(0, "X1");
            CheckSByte(101, "X1");
            CheckSByte(-117, "X1");
            CheckSByte(121, "X1");
            CheckSByte(18, "X1");
            CheckSByte(5, "X1");
            
            // format X2
            CheckSByte(SByte.MinValue, "X2");
            CheckSByte(SByte.MaxValue, "X2");
            CheckSByte(0, "X2");
            CheckSByte(-43, "X2");
            CheckSByte(-112, "X2");
            CheckSByte(-16, "X2");
            CheckSByte(-86, "X2");
            CheckSByte(97, "X2");
            
            // format X3
            CheckSByte(SByte.MinValue, "X3");
            CheckSByte(SByte.MaxValue, "X3");
            CheckSByte(0, "X3");
            CheckSByte(-8, "X3");
            CheckSByte(-5, "X3");
            CheckSByte(-15, "X3");
            CheckSByte(-68, "X3");
            CheckSByte(25, "X3");
            
            // format X4
            CheckSByte(SByte.MinValue, "X4");
            CheckSByte(SByte.MaxValue, "X4");
            CheckSByte(0, "X4");
            CheckSByte(-36, "X4");
            CheckSByte(-63, "X4");
            CheckSByte(-56, "X4");
            CheckSByte(-37, "X4");
            CheckSByte(80, "X4");
            
            // format X5
            CheckSByte(SByte.MinValue, "X5");
            CheckSByte(SByte.MaxValue, "X5");
            CheckSByte(0, "X5");
            CheckSByte(-9, "X5");
            CheckSByte(-15, "X5");
            CheckSByte(11, "X5");
            CheckSByte(12, "X5");
            CheckSByte(81, "X5");
        }
        
        [Fact]
        public void SByteFormatx()
        {
            
            // format x
            CheckSByte(SByte.MinValue, "x");
            CheckSByte(SByte.MaxValue, "x");
            CheckSByte(0, "x");
            CheckSByte(-102, "x");
            CheckSByte(-119, "x");
            CheckSByte(-82, "x");
            CheckSByte(82, "x");
            CheckSByte(-38, "x");
            
            // format x0
            CheckSByte(SByte.MinValue, "x0");
            CheckSByte(SByte.MaxValue, "x0");
            CheckSByte(0, "x0");
            CheckSByte(-51, "x0");
            CheckSByte(19, "x0");
            CheckSByte(-97, "x0");
            CheckSByte(-82, "x0");
            CheckSByte(79, "x0");
            
            // format x1
            CheckSByte(SByte.MinValue, "x1");
            CheckSByte(SByte.MaxValue, "x1");
            CheckSByte(0, "x1");
            CheckSByte(83, "x1");
            CheckSByte(-94, "x1");
            CheckSByte(-39, "x1");
            CheckSByte(41, "x1");
            CheckSByte(-26, "x1");
            
            // format x2
            CheckSByte(SByte.MinValue, "x2");
            CheckSByte(SByte.MaxValue, "x2");
            CheckSByte(0, "x2");
            CheckSByte(-70, "x2");
            CheckSByte(72, "x2");
            CheckSByte(-109, "x2");
            CheckSByte(66, "x2");
            CheckSByte(-120, "x2");
            
            // format x3
            CheckSByte(SByte.MinValue, "x3");
            CheckSByte(SByte.MaxValue, "x3");
            CheckSByte(0, "x3");
            CheckSByte(-37, "x3");
            CheckSByte(59, "x3");
            CheckSByte(49, "x3");
            CheckSByte(-40, "x3");
            CheckSByte(-31, "x3");
            
            // format x4
            CheckSByte(SByte.MinValue, "x4");
            CheckSByte(SByte.MaxValue, "x4");
            CheckSByte(0, "x4");
            CheckSByte(-31, "x4");
            CheckSByte(124, "x4");
            CheckSByte(-30, "x4");
            CheckSByte(92, "x4");
            CheckSByte(31, "x4");
            
            // format x5
            CheckSByte(SByte.MinValue, "x5");
            CheckSByte(SByte.MaxValue, "x5");
            CheckSByte(0, "x5");
            CheckSByte(-12, "x5");
            CheckSByte(-1, "x5");
            CheckSByte(-20, "x5");
            CheckSByte(64, "x5");
            CheckSByte(-22, "x5");
        }
        
        public void CheckUInt16(UInt16 value, string format)
        {
            var parsed = Format.Parse(format);
            formatter.Clear();
            formatter.Append(value, parsed);
            var result = formatter.ToString();
            var clrResult = value.ToString(format, CultureInfo.InvariantCulture);
            Assert.Equal(clrResult, result);
        }
        
        [Fact]
        public void UInt16FormatD()
        {
            
            // format D
            CheckUInt16(UInt16.MinValue, "D");
            CheckUInt16(UInt16.MaxValue, "D");
            CheckUInt16(0, "D");
            CheckUInt16(19530, "D");
            CheckUInt16(57880, "D");
            CheckUInt16(40367, "D");
            CheckUInt16(53245, "D");
            CheckUInt16(38107, "D");
            
            // format D0
            CheckUInt16(UInt16.MinValue, "D0");
            CheckUInt16(UInt16.MaxValue, "D0");
            CheckUInt16(0, "D0");
            CheckUInt16(58396, "D0");
            CheckUInt16(23673, "D0");
            CheckUInt16(17228, "D0");
            CheckUInt16(27884, "D0");
            CheckUInt16(50705, "D0");
            
            // format D1
            CheckUInt16(UInt16.MinValue, "D1");
            CheckUInt16(UInt16.MaxValue, "D1");
            CheckUInt16(0, "D1");
            CheckUInt16(14845, "D1");
            CheckUInt16(59278, "D1");
            CheckUInt16(40611, "D1");
            CheckUInt16(62641, "D1");
            CheckUInt16(38754, "D1");
            
            // format D2
            CheckUInt16(UInt16.MinValue, "D2");
            CheckUInt16(UInt16.MaxValue, "D2");
            CheckUInt16(0, "D2");
            CheckUInt16(44629, "D2");
            CheckUInt16(24140, "D2");
            CheckUInt16(51404, "D2");
            CheckUInt16(34107, "D2");
            CheckUInt16(30483, "D2");
            
            // format D3
            CheckUInt16(UInt16.MinValue, "D3");
            CheckUInt16(UInt16.MaxValue, "D3");
            CheckUInt16(0, "D3");
            CheckUInt16(24273, "D3");
            CheckUInt16(22514, "D3");
            CheckUInt16(54617, "D3");
            CheckUInt16(29055, "D3");
            CheckUInt16(63718, "D3");
            
            // format D4
            CheckUInt16(UInt16.MinValue, "D4");
            CheckUInt16(UInt16.MaxValue, "D4");
            CheckUInt16(0, "D4");
            CheckUInt16(20570, "D4");
            CheckUInt16(12630, "D4");
            CheckUInt16(16944, "D4");
            CheckUInt16(36267, "D4");
            CheckUInt16(23353, "D4");
            
            // format D5
            CheckUInt16(UInt16.MinValue, "D5");
            CheckUInt16(UInt16.MaxValue, "D5");
            CheckUInt16(0, "D5");
            CheckUInt16(21619, "D5");
            CheckUInt16(46518, "D5");
            CheckUInt16(39248, "D5");
            CheckUInt16(16095, "D5");
            CheckUInt16(6939, "D5");
        }
        
        [Fact]
        public void UInt16Formatd()
        {
            
            // format d
            CheckUInt16(UInt16.MinValue, "d");
            CheckUInt16(UInt16.MaxValue, "d");
            CheckUInt16(0, "d");
            CheckUInt16(22611, "d");
            CheckUInt16(11160, "d");
            CheckUInt16(17210, "d");
            CheckUInt16(11961, "d");
            CheckUInt16(9216, "d");
            
            // format d0
            CheckUInt16(UInt16.MinValue, "d0");
            CheckUInt16(UInt16.MaxValue, "d0");
            CheckUInt16(0, "d0");
            CheckUInt16(65281, "d0");
            CheckUInt16(30966, "d0");
            CheckUInt16(17663, "d0");
            CheckUInt16(37663, "d0");
            CheckUInt16(10107, "d0");
            
            // format d1
            CheckUInt16(UInt16.MinValue, "d1");
            CheckUInt16(UInt16.MaxValue, "d1");
            CheckUInt16(0, "d1");
            CheckUInt16(31361, "d1");
            CheckUInt16(24267, "d1");
            CheckUInt16(28296, "d1");
            CheckUInt16(18025, "d1");
            CheckUInt16(62010, "d1");
            
            // format d2
            CheckUInt16(UInt16.MinValue, "d2");
            CheckUInt16(UInt16.MaxValue, "d2");
            CheckUInt16(0, "d2");
            CheckUInt16(5824, "d2");
            CheckUInt16(46795, "d2");
            CheckUInt16(59269, "d2");
            CheckUInt16(18902, "d2");
            CheckUInt16(3129, "d2");
            
            // format d3
            CheckUInt16(UInt16.MinValue, "d3");
            CheckUInt16(UInt16.MaxValue, "d3");
            CheckUInt16(0, "d3");
            CheckUInt16(62551, "d3");
            CheckUInt16(3262, "d3");
            CheckUInt16(11311, "d3");
            CheckUInt16(55061, "d3");
            CheckUInt16(17537, "d3");
            
            // format d4
            CheckUInt16(UInt16.MinValue, "d4");
            CheckUInt16(UInt16.MaxValue, "d4");
            CheckUInt16(0, "d4");
            CheckUInt16(45765, "d4");
            CheckUInt16(6729, "d4");
            CheckUInt16(46496, "d4");
            CheckUInt16(4530, "d4");
            CheckUInt16(29086, "d4");
            
            // format d5
            CheckUInt16(UInt16.MinValue, "d5");
            CheckUInt16(UInt16.MaxValue, "d5");
            CheckUInt16(0, "d5");
            CheckUInt16(33862, "d5");
            CheckUInt16(20029, "d5");
            CheckUInt16(24515, "d5");
            CheckUInt16(55702, "d5");
            CheckUInt16(16142, "d5");
        }
        
        [Fact]
        public void UInt16FormatG()
        {
            
            // format G
            CheckUInt16(UInt16.MinValue, "G");
            CheckUInt16(UInt16.MaxValue, "G");
            CheckUInt16(0, "G");
            CheckUInt16(33469, "G");
            CheckUInt16(6930, "G");
            CheckUInt16(39442, "G");
            CheckUInt16(24891, "G");
            CheckUInt16(30737, "G");
        }
        
        [Fact]
        public void UInt16FormatX()
        {
            
            // format X
            CheckUInt16(UInt16.MinValue, "X");
            CheckUInt16(UInt16.MaxValue, "X");
            CheckUInt16(0, "X");
            CheckUInt16(58842, "X");
            CheckUInt16(4850, "X");
            CheckUInt16(16953, "X");
            CheckUInt16(18948, "X");
            CheckUInt16(32357, "X");
            
            // format X0
            CheckUInt16(UInt16.MinValue, "X0");
            CheckUInt16(UInt16.MaxValue, "X0");
            CheckUInt16(0, "X0");
            CheckUInt16(61838, "X0");
            CheckUInt16(49869, "X0");
            CheckUInt16(64453, "X0");
            CheckUInt16(39791, "X0");
            CheckUInt16(17529, "X0");
            
            // format X1
            CheckUInt16(UInt16.MinValue, "X1");
            CheckUInt16(UInt16.MaxValue, "X1");
            CheckUInt16(0, "X1");
            CheckUInt16(40358, "X1");
            CheckUInt16(52783, "X1");
            CheckUInt16(20346, "X1");
            CheckUInt16(12965, "X1");
            CheckUInt16(9923, "X1");
            
            // format X2
            CheckUInt16(UInt16.MinValue, "X2");
            CheckUInt16(UInt16.MaxValue, "X2");
            CheckUInt16(0, "X2");
            CheckUInt16(19349, "X2");
            CheckUInt16(65384, "X2");
            CheckUInt16(27683, "X2");
            CheckUInt16(59959, "X2");
            CheckUInt16(28985, "X2");
            
            // format X3
            CheckUInt16(UInt16.MinValue, "X3");
            CheckUInt16(UInt16.MaxValue, "X3");
            CheckUInt16(0, "X3");
            CheckUInt16(58551, "X3");
            CheckUInt16(50005, "X3");
            CheckUInt16(13133, "X3");
            CheckUInt16(8577, "X3");
            CheckUInt16(41780, "X3");
            
            // format X4
            CheckUInt16(UInt16.MinValue, "X4");
            CheckUInt16(UInt16.MaxValue, "X4");
            CheckUInt16(0, "X4");
            CheckUInt16(11331, "X4");
            CheckUInt16(65286, "X4");
            CheckUInt16(38129, "X4");
            CheckUInt16(1883, "X4");
            CheckUInt16(28541, "X4");
            
            // format X5
            CheckUInt16(UInt16.MinValue, "X5");
            CheckUInt16(UInt16.MaxValue, "X5");
            CheckUInt16(0, "X5");
            CheckUInt16(64429, "X5");
            CheckUInt16(7352, "X5");
            CheckUInt16(34377, "X5");
            CheckUInt16(53699, "X5");
            CheckUInt16(9822, "X5");
        }
        
        [Fact]
        public void UInt16Formatx()
        {
            
            // format x
            CheckUInt16(UInt16.MinValue, "x");
            CheckUInt16(UInt16.MaxValue, "x");
            CheckUInt16(0, "x");
            CheckUInt16(57700, "x");
            CheckUInt16(51843, "x");
            CheckUInt16(57897, "x");
            CheckUInt16(22704, "x");
            CheckUInt16(21233, "x");
            
            // format x0
            CheckUInt16(UInt16.MinValue, "x0");
            CheckUInt16(UInt16.MaxValue, "x0");
            CheckUInt16(0, "x0");
            CheckUInt16(61431, "x0");
            CheckUInt16(7811, "x0");
            CheckUInt16(6704, "x0");
            CheckUInt16(52536, "x0");
            CheckUInt16(54262, "x0");
            
            // format x1
            CheckUInt16(UInt16.MinValue, "x1");
            CheckUInt16(UInt16.MaxValue, "x1");
            CheckUInt16(0, "x1");
            CheckUInt16(46613, "x1");
            CheckUInt16(65218, "x1");
            CheckUInt16(11549, "x1");
            CheckUInt16(45778, "x1");
            CheckUInt16(62328, "x1");
            
            // format x2
            CheckUInt16(UInt16.MinValue, "x2");
            CheckUInt16(UInt16.MaxValue, "x2");
            CheckUInt16(0, "x2");
            CheckUInt16(33619, "x2");
            CheckUInt16(44781, "x2");
            CheckUInt16(45017, "x2");
            CheckUInt16(61441, "x2");
            CheckUInt16(37720, "x2");
            
            // format x3
            CheckUInt16(UInt16.MinValue, "x3");
            CheckUInt16(UInt16.MaxValue, "x3");
            CheckUInt16(0, "x3");
            CheckUInt16(8837, "x3");
            CheckUInt16(57252, "x3");
            CheckUInt16(8376, "x3");
            CheckUInt16(42703, "x3");
            CheckUInt16(21025, "x3");
            
            // format x4
            CheckUInt16(UInt16.MinValue, "x4");
            CheckUInt16(UInt16.MaxValue, "x4");
            CheckUInt16(0, "x4");
            CheckUInt16(62086, "x4");
            CheckUInt16(11739, "x4");
            CheckUInt16(62570, "x4");
            CheckUInt16(11250, "x4");
            CheckUInt16(18635, "x4");
            
            // format x5
            CheckUInt16(UInt16.MinValue, "x5");
            CheckUInt16(UInt16.MaxValue, "x5");
            CheckUInt16(0, "x5");
            CheckUInt16(33006, "x5");
            CheckUInt16(18405, "x5");
            CheckUInt16(32181, "x5");
            CheckUInt16(3143, "x5");
            CheckUInt16(17757, "x5");
        }
        
        public void CheckInt16(Int16 value, string format)
        {
            var parsed = Format.Parse(format);
            formatter.Clear();
            formatter.Append(value, parsed);
            var result = formatter.ToString();
            var clrResult = value.ToString(format, CultureInfo.InvariantCulture);
            Assert.Equal(clrResult, result);
        }
        
        [Fact]
        public void Int16FormatD()
        {
            
            // format D
            CheckInt16(Int16.MinValue, "D");
            CheckInt16(Int16.MaxValue, "D");
            CheckInt16(0, "D");
            CheckInt16(273, "D");
            CheckInt16(-25282, "D");
            CheckInt16(-27790, "D");
            CheckInt16(5957, "D");
            CheckInt16(320, "D");
            
            // format D0
            CheckInt16(Int16.MinValue, "D0");
            CheckInt16(Int16.MaxValue, "D0");
            CheckInt16(0, "D0");
            CheckInt16(17972, "D0");
            CheckInt16(10532, "D0");
            CheckInt16(-6637, "D0");
            CheckInt16(-12918, "D0");
            CheckInt16(27933, "D0");
            
            // format D1
            CheckInt16(Int16.MinValue, "D1");
            CheckInt16(Int16.MaxValue, "D1");
            CheckInt16(0, "D1");
            CheckInt16(-21120, "D1");
            CheckInt16(20969, "D1");
            CheckInt16(25117, "D1");
            CheckInt16(-27679, "D1");
            CheckInt16(27688, "D1");
            
            // format D2
            CheckInt16(Int16.MinValue, "D2");
            CheckInt16(Int16.MaxValue, "D2");
            CheckInt16(0, "D2");
            CheckInt16(-13121, "D2");
            CheckInt16(-4899, "D2");
            CheckInt16(5703, "D2");
            CheckInt16(-16789, "D2");
            CheckInt16(-31784, "D2");
            
            // format D3
            CheckInt16(Int16.MinValue, "D3");
            CheckInt16(Int16.MaxValue, "D3");
            CheckInt16(0, "D3");
            CheckInt16(-32320, "D3");
            CheckInt16(10699, "D3");
            CheckInt16(-17574, "D3");
            CheckInt16(-31090, "D3");
            CheckInt16(-8086, "D3");
            
            // format D4
            CheckInt16(Int16.MinValue, "D4");
            CheckInt16(Int16.MaxValue, "D4");
            CheckInt16(0, "D4");
            CheckInt16(16924, "D4");
            CheckInt16(-21992, "D4");
            CheckInt16(28221, "D4");
            CheckInt16(1133, "D4");
            CheckInt16(-11512, "D4");
            
            // format D5
            CheckInt16(Int16.MinValue, "D5");
            CheckInt16(Int16.MaxValue, "D5");
            CheckInt16(0, "D5");
            CheckInt16(-4561, "D5");
            CheckInt16(268, "D5");
            CheckInt16(-24363, "D5");
            CheckInt16(-4747, "D5");
            CheckInt16(-3481, "D5");
        }
        
        [Fact]
        public void Int16Formatd()
        {
            
            // format d
            CheckInt16(Int16.MinValue, "d");
            CheckInt16(Int16.MaxValue, "d");
            CheckInt16(0, "d");
            CheckInt16(-6635, "d");
            CheckInt16(7034, "d");
            CheckInt16(-26476, "d");
            CheckInt16(-4416, "d");
            CheckInt16(19746, "d");
            
            // format d0
            CheckInt16(Int16.MinValue, "d0");
            CheckInt16(Int16.MaxValue, "d0");
            CheckInt16(0, "d0");
            CheckInt16(-1697, "d0");
            CheckInt16(-1648, "d0");
            CheckInt16(21293, "d0");
            CheckInt16(14768, "d0");
            CheckInt16(-23391, "d0");
            
            // format d1
            CheckInt16(Int16.MinValue, "d1");
            CheckInt16(Int16.MaxValue, "d1");
            CheckInt16(0, "d1");
            CheckInt16(-24419, "d1");
            CheckInt16(-13379, "d1");
            CheckInt16(24712, "d1");
            CheckInt16(-16440, "d1");
            CheckInt16(31754, "d1");
            
            // format d2
            CheckInt16(Int16.MinValue, "d2");
            CheckInt16(Int16.MaxValue, "d2");
            CheckInt16(0, "d2");
            CheckInt16(-27632, "d2");
            CheckInt16(12701, "d2");
            CheckInt16(-16566, "d2");
            CheckInt16(-30610, "d2");
            CheckInt16(-15459, "d2");
            
            // format d3
            CheckInt16(Int16.MinValue, "d3");
            CheckInt16(Int16.MaxValue, "d3");
            CheckInt16(0, "d3");
            CheckInt16(22340, "d3");
            CheckInt16(25059, "d3");
            CheckInt16(-29468, "d3");
            CheckInt16(-18725, "d3");
            CheckInt16(16163, "d3");
            
            // format d4
            CheckInt16(Int16.MinValue, "d4");
            CheckInt16(Int16.MaxValue, "d4");
            CheckInt16(0, "d4");
            CheckInt16(7196, "d4");
            CheckInt16(15078, "d4");
            CheckInt16(24997, "d4");
            CheckInt16(31360, "d4");
            CheckInt16(-274, "d4");
            
            // format d5
            CheckInt16(Int16.MinValue, "d5");
            CheckInt16(Int16.MaxValue, "d5");
            CheckInt16(0, "d5");
            CheckInt16(11378, "d5");
            CheckInt16(12563, "d5");
            CheckInt16(-2904, "d5");
            CheckInt16(8569, "d5");
            CheckInt16(1555, "d5");
        }
        
        [Fact]
        public void Int16FormatG()
        {
            
            // format G
            CheckInt16(Int16.MinValue, "G");
            CheckInt16(Int16.MaxValue, "G");
            CheckInt16(0, "G");
            CheckInt16(12612, "G");
            CheckInt16(-11191, "G");
            CheckInt16(-22650, "G");
            CheckInt16(-3769, "G");
            CheckInt16(2680, "G");
        }
        
        [Fact]
        public void Int16FormatX()
        {
            
            // format X
            CheckInt16(Int16.MinValue, "X");
            CheckInt16(Int16.MaxValue, "X");
            CheckInt16(0, "X");
            CheckInt16(2095, "X");
            CheckInt16(22173, "X");
            CheckInt16(425, "X");
            CheckInt16(25068, "X");
            CheckInt16(-16436, "X");
            
            // format X0
            CheckInt16(Int16.MinValue, "X0");
            CheckInt16(Int16.MaxValue, "X0");
            CheckInt16(0, "X0");
            CheckInt16(-2466, "X0");
            CheckInt16(-13938, "X0");
            CheckInt16(11893, "X0");
            CheckInt16(2145, "X0");
            CheckInt16(-16648, "X0");
            
            // format X1
            CheckInt16(Int16.MinValue, "X1");
            CheckInt16(Int16.MaxValue, "X1");
            CheckInt16(0, "X1");
            CheckInt16(15505, "X1");
            CheckInt16(-15934, "X1");
            CheckInt16(-26522, "X1");
            CheckInt16(-22057, "X1");
            CheckInt16(6945, "X1");
            
            // format X2
            CheckInt16(Int16.MinValue, "X2");
            CheckInt16(Int16.MaxValue, "X2");
            CheckInt16(0, "X2");
            CheckInt16(1073, "X2");
            CheckInt16(3734, "X2");
            CheckInt16(25015, "X2");
            CheckInt16(12188, "X2");
            CheckInt16(-20218, "X2");
            
            // format X3
            CheckInt16(Int16.MinValue, "X3");
            CheckInt16(Int16.MaxValue, "X3");
            CheckInt16(0, "X3");
            CheckInt16(15992, "X3");
            CheckInt16(6121, "X3");
            CheckInt16(22699, "X3");
            CheckInt16(-17727, "X3");
            CheckInt16(-2003, "X3");
            
            // format X4
            CheckInt16(Int16.MinValue, "X4");
            CheckInt16(Int16.MaxValue, "X4");
            CheckInt16(0, "X4");
            CheckInt16(-4215, "X4");
            CheckInt16(22292, "X4");
            CheckInt16(-16626, "X4");
            CheckInt16(14772, "X4");
            CheckInt16(-13626, "X4");
            
            // format X5
            CheckInt16(Int16.MinValue, "X5");
            CheckInt16(Int16.MaxValue, "X5");
            CheckInt16(0, "X5");
            CheckInt16(16325, "X5");
            CheckInt16(2582, "X5");
            CheckInt16(19969, "X5");
            CheckInt16(-523, "X5");
            CheckInt16(15213, "X5");
        }
        
        [Fact]
        public void Int16Formatx()
        {
            
            // format x
            CheckInt16(Int16.MinValue, "x");
            CheckInt16(Int16.MaxValue, "x");
            CheckInt16(0, "x");
            CheckInt16(-32601, "x");
            CheckInt16(-8134, "x");
            CheckInt16(-21769, "x");
            CheckInt16(30478, "x");
            CheckInt16(-14140, "x");
            
            // format x0
            CheckInt16(Int16.MinValue, "x0");
            CheckInt16(Int16.MaxValue, "x0");
            CheckInt16(0, "x0");
            CheckInt16(-11635, "x0");
            CheckInt16(-29583, "x0");
            CheckInt16(-9916, "x0");
            CheckInt16(15240, "x0");
            CheckInt16(16988, "x0");
            
            // format x1
            CheckInt16(Int16.MinValue, "x1");
            CheckInt16(Int16.MaxValue, "x1");
            CheckInt16(0, "x1");
            CheckInt16(-5456, "x1");
            CheckInt16(6316, "x1");
            CheckInt16(-13616, "x1");
            CheckInt16(-31144, "x1");
            CheckInt16(-32287, "x1");
            
            // format x2
            CheckInt16(Int16.MinValue, "x2");
            CheckInt16(Int16.MaxValue, "x2");
            CheckInt16(0, "x2");
            CheckInt16(-23891, "x2");
            CheckInt16(-3440, "x2");
            CheckInt16(-2071, "x2");
            CheckInt16(-16319, "x2");
            CheckInt16(19454, "x2");
            
            // format x3
            CheckInt16(Int16.MinValue, "x3");
            CheckInt16(Int16.MaxValue, "x3");
            CheckInt16(0, "x3");
            CheckInt16(28740, "x3");
            CheckInt16(32240, "x3");
            CheckInt16(-14617, "x3");
            CheckInt16(-5698, "x3");
            CheckInt16(20546, "x3");
            
            // format x4
            CheckInt16(Int16.MinValue, "x4");
            CheckInt16(Int16.MaxValue, "x4");
            CheckInt16(0, "x4");
            CheckInt16(8009, "x4");
            CheckInt16(-30080, "x4");
            CheckInt16(29887, "x4");
            CheckInt16(-16998, "x4");
            CheckInt16(-207, "x4");
            
            // format x5
            CheckInt16(Int16.MinValue, "x5");
            CheckInt16(Int16.MaxValue, "x5");
            CheckInt16(0, "x5");
            CheckInt16(-19846, "x5");
            CheckInt16(-3137, "x5");
            CheckInt16(6768, "x5");
            CheckInt16(-4503, "x5");
            CheckInt16(6777, "x5");
        }
        
        public void CheckUInt32(UInt32 value, string format)
        {
            var parsed = Format.Parse(format);
            formatter.Clear();
            formatter.Append(value, parsed);
            var result = formatter.ToString();
            var clrResult = value.ToString(format, CultureInfo.InvariantCulture);
            Assert.Equal(clrResult, result);
        }
        
        [Fact]
        public void UInt32FormatD()
        {
            
            // format D
            CheckUInt32(UInt32.MinValue, "D");
            CheckUInt32(UInt32.MaxValue, "D");
            CheckUInt32(0, "D");
            CheckUInt32(301708922, "D");
            CheckUInt32(835711388, "D");
            CheckUInt32(1968492561, "D");
            CheckUInt32(862731528, "D");
            CheckUInt32(1866222068, "D");
            
            // format D0
            CheckUInt32(UInt32.MinValue, "D0");
            CheckUInt32(UInt32.MaxValue, "D0");
            CheckUInt32(0, "D0");
            CheckUInt32(1493430514, "D0");
            CheckUInt32(525500467, "D0");
            CheckUInt32(244421466, "D0");
            CheckUInt32(1009933999, "D0");
            CheckUInt32(113152097, "D0");
            
            // format D1
            CheckUInt32(UInt32.MinValue, "D1");
            CheckUInt32(UInt32.MaxValue, "D1");
            CheckUInt32(0, "D1");
            CheckUInt32(1802398837, "D1");
            CheckUInt32(1176654413, "D1");
            CheckUInt32(475747219, "D1");
            CheckUInt32(1542026502, "D1");
            CheckUInt32(336369415, "D1");
            
            // format D2
            CheckUInt32(UInt32.MinValue, "D2");
            CheckUInt32(UInt32.MaxValue, "D2");
            CheckUInt32(0, "D2");
            CheckUInt32(647670751, "D2");
            CheckUInt32(152487555, "D2");
            CheckUInt32(1189130702, "D2");
            CheckUInt32(1492855714, "D2");
            CheckUInt32(1704193721, "D2");
            
            // format D3
            CheckUInt32(UInt32.MinValue, "D3");
            CheckUInt32(UInt32.MaxValue, "D3");
            CheckUInt32(0, "D3");
            CheckUInt32(22742409, "D3");
            CheckUInt32(212434048, "D3");
            CheckUInt32(1620854352, "D3");
            CheckUInt32(325459069, "D3");
            CheckUInt32(1421688242, "D3");
            
            // format D4
            CheckUInt32(UInt32.MinValue, "D4");
            CheckUInt32(UInt32.MaxValue, "D4");
            CheckUInt32(0, "D4");
            CheckUInt32(604430953, "D4");
            CheckUInt32(198714172, "D4");
            CheckUInt32(232052385, "D4");
            CheckUInt32(506170497, "D4");
            CheckUInt32(1206999996, "D4");
            
            // format D5
            CheckUInt32(UInt32.MinValue, "D5");
            CheckUInt32(UInt32.MaxValue, "D5");
            CheckUInt32(0, "D5");
            CheckUInt32(2071514287, "D5");
            CheckUInt32(2132672859, "D5");
            CheckUInt32(1848837649, "D5");
            CheckUInt32(904854012, "D5");
            CheckUInt32(1861565419, "D5");
        }
        
        [Fact]
        public void UInt32Formatd()
        {
            
            // format d
            CheckUInt32(UInt32.MinValue, "d");
            CheckUInt32(UInt32.MaxValue, "d");
            CheckUInt32(0, "d");
            CheckUInt32(1602674782, "d");
            CheckUInt32(1140047483, "d");
            CheckUInt32(143168714, "d");
            CheckUInt32(820273541, "d");
            CheckUInt32(217836757, "d");
            
            // format d0
            CheckUInt32(UInt32.MinValue, "d0");
            CheckUInt32(UInt32.MaxValue, "d0");
            CheckUInt32(0, "d0");
            CheckUInt32(1490056575, "d0");
            CheckUInt32(1885815089, "d0");
            CheckUInt32(1732337586, "d0");
            CheckUInt32(773899076, "d0");
            CheckUInt32(2092105958, "d0");
            
            // format d1
            CheckUInt32(UInt32.MinValue, "d1");
            CheckUInt32(UInt32.MaxValue, "d1");
            CheckUInt32(0, "d1");
            CheckUInt32(159567713, "d1");
            CheckUInt32(1759823872, "d1");
            CheckUInt32(511116320, "d1");
            CheckUInt32(180420255, "d1");
            CheckUInt32(419322407, "d1");
            
            // format d2
            CheckUInt32(UInt32.MinValue, "d2");
            CheckUInt32(UInt32.MaxValue, "d2");
            CheckUInt32(0, "d2");
            CheckUInt32(270959530, "d2");
            CheckUInt32(1929320653, "d2");
            CheckUInt32(1950174744, "d2");
            CheckUInt32(1369522033, "d2");
            CheckUInt32(1273110571, "d2");
            
            // format d3
            CheckUInt32(UInt32.MinValue, "d3");
            CheckUInt32(UInt32.MaxValue, "d3");
            CheckUInt32(0, "d3");
            CheckUInt32(89274874, "d3");
            CheckUInt32(1362340683, "d3");
            CheckUInt32(1643033492, "d3");
            CheckUInt32(1588526933, "d3");
            CheckUInt32(1261791115, "d3");
            
            // format d4
            CheckUInt32(UInt32.MinValue, "d4");
            CheckUInt32(UInt32.MaxValue, "d4");
            CheckUInt32(0, "d4");
            CheckUInt32(1294716342, "d4");
            CheckUInt32(293448082, "d4");
            CheckUInt32(1885734616, "d4");
            CheckUInt32(1950417650, "d4");
            CheckUInt32(189121457, "d4");
            
            // format d5
            CheckUInt32(UInt32.MinValue, "d5");
            CheckUInt32(UInt32.MaxValue, "d5");
            CheckUInt32(0, "d5");
            CheckUInt32(1817209625, "d5");
            CheckUInt32(1475300411, "d5");
            CheckUInt32(1718376854, "d5");
            CheckUInt32(1827944730, "d5");
            CheckUInt32(881178280, "d5");
        }
        
        [Fact]
        public void UInt32FormatG()
        {
            
            // format G
            CheckUInt32(UInt32.MinValue, "G");
            CheckUInt32(UInt32.MaxValue, "G");
            CheckUInt32(0, "G");
            CheckUInt32(1655106915, "G");
            CheckUInt32(9318841, "G");
            CheckUInt32(368857161, "G");
            CheckUInt32(1275018957, "G");
            CheckUInt32(214137146, "G");
        }
        
        [Fact]
        public void UInt32FormatX()
        {
            
            // format X
            CheckUInt32(UInt32.MinValue, "X");
            CheckUInt32(UInt32.MaxValue, "X");
            CheckUInt32(0, "X");
            CheckUInt32(284410967, "X");
            CheckUInt32(627580109, "X");
            CheckUInt32(846955276, "X");
            CheckUInt32(380836758, "X");
            CheckUInt32(1262120529, "X");
            
            // format X0
            CheckUInt32(UInt32.MinValue, "X0");
            CheckUInt32(UInt32.MaxValue, "X0");
            CheckUInt32(0, "X0");
            CheckUInt32(992090728, "X0");
            CheckUInt32(1835081499, "X0");
            CheckUInt32(51632130, "X0");
            CheckUInt32(86848090, "X0");
            CheckUInt32(936040466, "X0");
            
            // format X1
            CheckUInt32(UInt32.MinValue, "X1");
            CheckUInt32(UInt32.MaxValue, "X1");
            CheckUInt32(0, "X1");
            CheckUInt32(142193634, "X1");
            CheckUInt32(182498115, "X1");
            CheckUInt32(479315616, "X1");
            CheckUInt32(1779227088, "X1");
            CheckUInt32(1772290545, "X1");
            
            // format X2
            CheckUInt32(UInt32.MinValue, "X2");
            CheckUInt32(UInt32.MaxValue, "X2");
            CheckUInt32(0, "X2");
            CheckUInt32(240334099, "X2");
            CheckUInt32(1644497638, "X2");
            CheckUInt32(702125428, "X2");
            CheckUInt32(1705966073, "X2");
            CheckUInt32(1070604062, "X2");
            
            // format X3
            CheckUInt32(UInt32.MinValue, "X3");
            CheckUInt32(UInt32.MaxValue, "X3");
            CheckUInt32(0, "X3");
            CheckUInt32(1196608493, "X3");
            CheckUInt32(80473, "X3");
            CheckUInt32(1929403583, "X3");
            CheckUInt32(584777619, "X3");
            CheckUInt32(274896333, "X3");
            
            // format X4
            CheckUInt32(UInt32.MinValue, "X4");
            CheckUInt32(UInt32.MaxValue, "X4");
            CheckUInt32(0, "X4");
            CheckUInt32(831750949, "X4");
            CheckUInt32(41447018, "X4");
            CheckUInt32(830655237, "X4");
            CheckUInt32(1446725622, "X4");
            CheckUInt32(911699139, "X4");
            
            // format X5
            CheckUInt32(UInt32.MinValue, "X5");
            CheckUInt32(UInt32.MaxValue, "X5");
            CheckUInt32(0, "X5");
            CheckUInt32(261640689, "X5");
            CheckUInt32(1560463492, "X5");
            CheckUInt32(675155787, "X5");
            CheckUInt32(1155384887, "X5");
            CheckUInt32(988699604, "X5");
        }
        
        [Fact]
        public void UInt32Formatx()
        {
            
            // format x
            CheckUInt32(UInt32.MinValue, "x");
            CheckUInt32(UInt32.MaxValue, "x");
            CheckUInt32(0, "x");
            CheckUInt32(1609178412, "x");
            CheckUInt32(515385407, "x");
            CheckUInt32(1262196734, "x");
            CheckUInt32(326406404, "x");
            CheckUInt32(269700387, "x");
            
            // format x0
            CheckUInt32(UInt32.MinValue, "x0");
            CheckUInt32(UInt32.MaxValue, "x0");
            CheckUInt32(0, "x0");
            CheckUInt32(1607118490, "x0");
            CheckUInt32(241815952, "x0");
            CheckUInt32(1798886526, "x0");
            CheckUInt32(1014377184, "x0");
            CheckUInt32(46927823, "x0");
            
            // format x1
            CheckUInt32(UInt32.MinValue, "x1");
            CheckUInt32(UInt32.MaxValue, "x1");
            CheckUInt32(0, "x1");
            CheckUInt32(1634711510, "x1");
            CheckUInt32(995984795, "x1");
            CheckUInt32(2086633413, "x1");
            CheckUInt32(55654185, "x1");
            CheckUInt32(640844181, "x1");
            
            // format x2
            CheckUInt32(UInt32.MinValue, "x2");
            CheckUInt32(UInt32.MaxValue, "x2");
            CheckUInt32(0, "x2");
            CheckUInt32(10609277, "x2");
            CheckUInt32(1454677060, "x2");
            CheckUInt32(810374735, "x2");
            CheckUInt32(204414895, "x2");
            CheckUInt32(1165012300, "x2");
            
            // format x3
            CheckUInt32(UInt32.MinValue, "x3");
            CheckUInt32(UInt32.MaxValue, "x3");
            CheckUInt32(0, "x3");
            CheckUInt32(284330494, "x3");
            CheckUInt32(845660173, "x3");
            CheckUInt32(262177657, "x3");
            CheckUInt32(105940425, "x3");
            CheckUInt32(430369580, "x3");
            
            // format x4
            CheckUInt32(UInt32.MinValue, "x4");
            CheckUInt32(UInt32.MaxValue, "x4");
            CheckUInt32(0, "x4");
            CheckUInt32(950643710, "x4");
            CheckUInt32(1004426262, "x4");
            CheckUInt32(752390155, "x4");
            CheckUInt32(1322632598, "x4");
            CheckUInt32(674399777, "x4");
            
            // format x5
            CheckUInt32(UInt32.MinValue, "x5");
            CheckUInt32(UInt32.MaxValue, "x5");
            CheckUInt32(0, "x5");
            CheckUInt32(729213789, "x5");
            CheckUInt32(1654825975, "x5");
            CheckUInt32(1471414376, "x5");
            CheckUInt32(790527484, "x5");
            CheckUInt32(163112133, "x5");
        }
        
        public void CheckInt32(Int32 value, string format)
        {
            var parsed = Format.Parse(format);
            formatter.Clear();
            formatter.Append(value, parsed);
            var result = formatter.ToString();
            var clrResult = value.ToString(format, CultureInfo.InvariantCulture);
            Assert.Equal(clrResult, result);
        }
        
        [Fact]
        public void Int32FormatD()
        {
            
            // format D
            CheckInt32(Int32.MinValue, "D");
            CheckInt32(Int32.MaxValue, "D");
            CheckInt32(0, "D");
            CheckInt32(-1872432341, "D");
            CheckInt32(-375719026, "D");
            CheckInt32(1610969218, "D");
            CheckInt32(348677593, "D");
            CheckInt32(-537849798, "D");
            
            // format D0
            CheckInt32(Int32.MinValue, "D0");
            CheckInt32(Int32.MaxValue, "D0");
            CheckInt32(0, "D0");
            CheckInt32(-1983249803, "D0");
            CheckInt32(775001051, "D0");
            CheckInt32(-901089864, "D0");
            CheckInt32(-750088759, "D0");
            CheckInt32(-2137856236, "D0");
            
            // format D1
            CheckInt32(Int32.MinValue, "D1");
            CheckInt32(Int32.MaxValue, "D1");
            CheckInt32(0, "D1");
            CheckInt32(-763518241, "D1");
            CheckInt32(1156256308, "D1");
            CheckInt32(-1466540326, "D1");
            CheckInt32(-1636909446, "D1");
            CheckInt32(339977406, "D1");
            
            // format D2
            CheckInt32(Int32.MinValue, "D2");
            CheckInt32(Int32.MaxValue, "D2");
            CheckInt32(0, "D2");
            CheckInt32(-2127369184, "D2");
            CheckInt32(1296105928, "D2");
            CheckInt32(-915895491, "D2");
            CheckInt32(-1078958038, "D2");
            CheckInt32(740929322, "D2");
            
            // format D3
            CheckInt32(Int32.MinValue, "D3");
            CheckInt32(Int32.MaxValue, "D3");
            CheckInt32(0, "D3");
            CheckInt32(2083136546, "D3");
            CheckInt32(-1871811510, "D3");
            CheckInt32(-594603428, "D3");
            CheckInt32(229425209, "D3");
            CheckInt32(-421542738, "D3");
            
            // format D4
            CheckInt32(Int32.MinValue, "D4");
            CheckInt32(Int32.MaxValue, "D4");
            CheckInt32(0, "D4");
            CheckInt32(2126608678, "D4");
            CheckInt32(-1481041791, "D4");
            CheckInt32(1547077540, "D4");
            CheckInt32(-1373528244, "D4");
            CheckInt32(2117209008, "D4");
            
            // format D5
            CheckInt32(Int32.MinValue, "D5");
            CheckInt32(Int32.MaxValue, "D5");
            CheckInt32(0, "D5");
            CheckInt32(1465366743, "D5");
            CheckInt32(-575048994, "D5");
            CheckInt32(807782934, "D5");
            CheckInt32(-953674972, "D5");
            CheckInt32(2037469598, "D5");
        }
        
        [Fact]
        public void Int32Formatd()
        {
            
            // format d
            CheckInt32(Int32.MinValue, "d");
            CheckInt32(Int32.MaxValue, "d");
            CheckInt32(0, "d");
            CheckInt32(-2022972889, "d");
            CheckInt32(1877295215, "d");
            CheckInt32(768716209, "d");
            CheckInt32(-528879891, "d");
            CheckInt32(-1448917047, "d");
            
            // format d0
            CheckInt32(Int32.MinValue, "d0");
            CheckInt32(Int32.MaxValue, "d0");
            CheckInt32(0, "d0");
            CheckInt32(-373267020, "d0");
            CheckInt32(-54711194, "d0");
            CheckInt32(1486072648, "d0");
            CheckInt32(191012276, "d0");
            CheckInt32(492948157, "d0");
            
            // format d1
            CheckInt32(Int32.MinValue, "d1");
            CheckInt32(Int32.MaxValue, "d1");
            CheckInt32(0, "d1");
            CheckInt32(-402263780, "d1");
            CheckInt32(1551867333, "d1");
            CheckInt32(-892336664, "d1");
            CheckInt32(-1503068431, "d1");
            CheckInt32(657972666, "d1");
            
            // format d2
            CheckInt32(Int32.MinValue, "d2");
            CheckInt32(Int32.MaxValue, "d2");
            CheckInt32(0, "d2");
            CheckInt32(2042155134, "d2");
            CheckInt32(-56522764, "d2");
            CheckInt32(1991946907, "d2");
            CheckInt32(1454273513, "d2");
            CheckInt32(-1464925813, "d2");
            
            // format d3
            CheckInt32(Int32.MinValue, "d3");
            CheckInt32(Int32.MaxValue, "d3");
            CheckInt32(0, "d3");
            CheckInt32(1090344699, "d3");
            CheckInt32(1178248801, "d3");
            CheckInt32(635009972, "d3");
            CheckInt32(1965196120, "d3");
            CheckInt32(1881546759, "d3");
            
            // format d4
            CheckInt32(Int32.MinValue, "d4");
            CheckInt32(Int32.MaxValue, "d4");
            CheckInt32(0, "d4");
            CheckInt32(-120183460, "d4");
            CheckInt32(-389510844, "d4");
            CheckInt32(870517710, "d4");
            CheckInt32(-1971596023, "d4");
            CheckInt32(-1035299815, "d4");
            
            // format d5
            CheckInt32(Int32.MinValue, "d5");
            CheckInt32(Int32.MaxValue, "d5");
            CheckInt32(0, "d5");
            CheckInt32(-1477299685, "d5");
            CheckInt32(-1180011689, "d5");
            CheckInt32(-723522380, "d5");
            CheckInt32(1633877967, "d5");
            CheckInt32(-775561647, "d5");
        }
        
        [Fact]
        public void Int32FormatG()
        {
            
            // format G
            CheckInt32(Int32.MinValue, "G");
            CheckInt32(Int32.MaxValue, "G");
            CheckInt32(0, "G");
            CheckInt32(1636494231, "G");
            CheckInt32(1892505390, "G");
            CheckInt32(-353809849, "G");
            CheckInt32(1568510680, "G");
            CheckInt32(-1245126008, "G");
        }
        
        [Fact]
        public void Int32FormatX()
        {
            
            // format X
            CheckInt32(Int32.MinValue, "X");
            CheckInt32(Int32.MaxValue, "X");
            CheckInt32(0, "X");
            CheckInt32(245516759, "X");
            CheckInt32(917612632, "X");
            CheckInt32(163224232, "X");
            CheckInt32(1104939014, "X");
            CheckInt32(425727182, "X");
            
            // format X0
            CheckInt32(Int32.MinValue, "X0");
            CheckInt32(Int32.MaxValue, "X0");
            CheckInt32(0, "X0");
            CheckInt32(926516596, "X0");
            CheckInt32(665589147, "X0");
            CheckInt32(1384377039, "X0");
            CheckInt32(-503015850, "X0");
            CheckInt32(-775492767, "X0");
            
            // format X1
            CheckInt32(Int32.MinValue, "X1");
            CheckInt32(Int32.MaxValue, "X1");
            CheckInt32(0, "X1");
            CheckInt32(-288571695, "X1");
            CheckInt32(-1326946090, "X1");
            CheckInt32(-375488253, "X1");
            CheckInt32(-2146189320, "X1");
            CheckInt32(239505204, "X1");
            
            // format X2
            CheckInt32(Int32.MinValue, "X2");
            CheckInt32(Int32.MaxValue, "X2");
            CheckInt32(0, "X2");
            CheckInt32(-2002670019, "X2");
            CheckInt32(-899516880, "X2");
            CheckInt32(459970215, "X2");
            CheckInt32(-1107075159, "X2");
            CheckInt32(1002285120, "X2");
            
            // format X3
            CheckInt32(Int32.MinValue, "X3");
            CheckInt32(Int32.MaxValue, "X3");
            CheckInt32(0, "X3");
            CheckInt32(2068845439, "X3");
            CheckInt32(-480222764, "X3");
            CheckInt32(1956410727, "X3");
            CheckInt32(-2119501464, "X3");
            CheckInt32(541861688, "X3");
            
            // format X4
            CheckInt32(Int32.MinValue, "X4");
            CheckInt32(Int32.MaxValue, "X4");
            CheckInt32(0, "X4");
            CheckInt32(363704041, "X4");
            CheckInt32(1424843072, "X4");
            CheckInt32(828798954, "X4");
            CheckInt32(-221098257, "X4");
            CheckInt32(-417985582, "X4");
            
            // format X5
            CheckInt32(Int32.MinValue, "X5");
            CheckInt32(Int32.MaxValue, "X5");
            CheckInt32(0, "X5");
            CheckInt32(152238401, "X5");
            CheckInt32(-1371186154, "X5");
            CheckInt32(-713063489, "X5");
            CheckInt32(557597398, "X5");
            CheckInt32(-299468621, "X5");
        }
        
        [Fact]
        public void Int32Formatx()
        {
            
            // format x
            CheckInt32(Int32.MinValue, "x");
            CheckInt32(Int32.MaxValue, "x");
            CheckInt32(0, "x");
            CheckInt32(-106065402, "x");
            CheckInt32(-1157937976, "x");
            CheckInt32(-1834831021, "x");
            CheckInt32(-579023416, "x");
            CheckInt32(-1337176003, "x");
            
            // format x0
            CheckInt32(Int32.MinValue, "x0");
            CheckInt32(Int32.MaxValue, "x0");
            CheckInt32(0, "x0");
            CheckInt32(-1658042329, "x0");
            CheckInt32(68894070, "x0");
            CheckInt32(-1787577428, "x0");
            CheckInt32(-493900759, "x0");
            CheckInt32(-1236613859, "x0");
            
            // format x1
            CheckInt32(Int32.MinValue, "x1");
            CheckInt32(Int32.MaxValue, "x1");
            CheckInt32(0, "x1");
            CheckInt32(-1855640734, "x1");
            CheckInt32(2116035922, "x1");
            CheckInt32(420339902, "x1");
            CheckInt32(-799484108, "x1");
            CheckInt32(-1641731950, "x1");
            
            // format x2
            CheckInt32(Int32.MinValue, "x2");
            CheckInt32(Int32.MaxValue, "x2");
            CheckInt32(0, "x2");
            CheckInt32(1769266202, "x2");
            CheckInt32(-833597939, "x2");
            CheckInt32(-1182087539, "x2");
            CheckInt32(397833258, "x2");
            CheckInt32(1949069468, "x2");
            
            // format x3
            CheckInt32(Int32.MinValue, "x3");
            CheckInt32(Int32.MaxValue, "x3");
            CheckInt32(0, "x3");
            CheckInt32(-754730819, "x3");
            CheckInt32(-581817199, "x3");
            CheckInt32(1170089057, "x3");
            CheckInt32(425289183, "x3");
            CheckInt32(781835582, "x3");
            
            // format x4
            CheckInt32(Int32.MinValue, "x4");
            CheckInt32(Int32.MaxValue, "x4");
            CheckInt32(0, "x4");
            CheckInt32(-661355659, "x4");
            CheckInt32(-1658529775, "x4");
            CheckInt32(1746964614, "x4");
            CheckInt32(147925715, "x4");
            CheckInt32(-1930058206, "x4");
            
            // format x5
            CheckInt32(Int32.MinValue, "x5");
            CheckInt32(Int32.MaxValue, "x5");
            CheckInt32(0, "x5");
            CheckInt32(-1613384625, "x5");
            CheckInt32(1625385998, "x5");
            CheckInt32(-574325742, "x5");
            CheckInt32(-179524827, "x5");
            CheckInt32(-2064232027, "x5");
        }
        
        public void CheckUInt64(UInt64 value, string format)
        {
            var parsed = Format.Parse(format);
            formatter.Clear();
            formatter.Append(value, parsed);
            var result = formatter.ToString();
            var clrResult = value.ToString(format, CultureInfo.InvariantCulture);
            Assert.Equal(clrResult, result);
        }
        
        [Fact]
        public void UInt64FormatD()
        {
            
            // format D
            CheckUInt64(UInt64.MinValue, "D");
            CheckUInt64(UInt64.MaxValue, "D");
            CheckUInt64(0, "D");
            CheckUInt64(49065525, "D");
            CheckUInt64(1419455791, "D");
            CheckUInt64(1608997862, "D");
            CheckUInt64(673199984, "D");
            CheckUInt64(518968815, "D");
            
            // format D0
            CheckUInt64(UInt64.MinValue, "D0");
            CheckUInt64(UInt64.MaxValue, "D0");
            CheckUInt64(0, "D0");
            CheckUInt64(606693130, "D0");
            CheckUInt64(753748409, "D0");
            CheckUInt64(1894158639, "D0");
            CheckUInt64(1299031972, "D0");
            CheckUInt64(1281224263, "D0");
            
            // format D1
            CheckUInt64(UInt64.MinValue, "D1");
            CheckUInt64(UInt64.MaxValue, "D1");
            CheckUInt64(0, "D1");
            CheckUInt64(1149373001, "D1");
            CheckUInt64(527133869, "D1");
            CheckUInt64(1423941464, "D1");
            CheckUInt64(1375567245, "D1");
            CheckUInt64(139798657, "D1");
            
            // format D2
            CheckUInt64(UInt64.MinValue, "D2");
            CheckUInt64(UInt64.MaxValue, "D2");
            CheckUInt64(0, "D2");
            CheckUInt64(474768841, "D2");
            CheckUInt64(1860795353, "D2");
            CheckUInt64(1807828950, "D2");
            CheckUInt64(1634742668, "D2");
            CheckUInt64(264104095, "D2");
            
            // format D3
            CheckUInt64(UInt64.MinValue, "D3");
            CheckUInt64(UInt64.MaxValue, "D3");
            CheckUInt64(0, "D3");
            CheckUInt64(99300334, "D3");
            CheckUInt64(1709016315, "D3");
            CheckUInt64(1439354056, "D3");
            CheckUInt64(1688900635, "D3");
            CheckUInt64(1097512897, "D3");
            
            // format D4
            CheckUInt64(UInt64.MinValue, "D4");
            CheckUInt64(UInt64.MaxValue, "D4");
            CheckUInt64(0, "D4");
            CheckUInt64(234000803, "D4");
            CheckUInt64(1771045250, "D4");
            CheckUInt64(45795510, "D4");
            CheckUInt64(1795035191, "D4");
            CheckUInt64(883888210, "D4");
            
            // format D5
            CheckUInt64(UInt64.MinValue, "D5");
            CheckUInt64(UInt64.MaxValue, "D5");
            CheckUInt64(0, "D5");
            CheckUInt64(1107074462, "D5");
            CheckUInt64(1590618749, "D5");
            CheckUInt64(355601859, "D5");
            CheckUInt64(1388967854, "D5");
            CheckUInt64(217099178, "D5");
        }
        
        [Fact]
        public void UInt64Formatd()
        {
            
            // format d
            CheckUInt64(UInt64.MinValue, "d");
            CheckUInt64(UInt64.MaxValue, "d");
            CheckUInt64(0, "d");
            CheckUInt64(1389383513, "d");
            CheckUInt64(1832983147, "d");
            CheckUInt64(985329789, "d");
            CheckUInt64(654283819, "d");
            CheckUInt64(1140271485, "d");
            
            // format d0
            CheckUInt64(UInt64.MinValue, "d0");
            CheckUInt64(UInt64.MaxValue, "d0");
            CheckUInt64(0, "d0");
            CheckUInt64(164235032, "d0");
            CheckUInt64(401250724, "d0");
            CheckUInt64(1684752266, "d0");
            CheckUInt64(648833941, "d0");
            CheckUInt64(1258279480, "d0");
            
            // format d1
            CheckUInt64(UInt64.MinValue, "d1");
            CheckUInt64(UInt64.MaxValue, "d1");
            CheckUInt64(0, "d1");
            CheckUInt64(1086250754, "d1");
            CheckUInt64(1244272197, "d1");
            CheckUInt64(249818754, "d1");
            CheckUInt64(396223030, "d1");
            CheckUInt64(99556899, "d1");
            
            // format d2
            CheckUInt64(UInt64.MinValue, "d2");
            CheckUInt64(UInt64.MaxValue, "d2");
            CheckUInt64(0, "d2");
            CheckUInt64(572889142, "d2");
            CheckUInt64(519179522, "d2");
            CheckUInt64(1494895061, "d2");
            CheckUInt64(1800127929, "d2");
            CheckUInt64(1441051042, "d2");
            
            // format d3
            CheckUInt64(UInt64.MinValue, "d3");
            CheckUInt64(UInt64.MaxValue, "d3");
            CheckUInt64(0, "d3");
            CheckUInt64(487532857, "d3");
            CheckUInt64(2127585382, "d3");
            CheckUInt64(2067580874, "d3");
            CheckUInt64(1723170734, "d3");
            CheckUInt64(284968012, "d3");
            
            // format d4
            CheckUInt64(UInt64.MinValue, "d4");
            CheckUInt64(UInt64.MaxValue, "d4");
            CheckUInt64(0, "d4");
            CheckUInt64(983131527, "d4");
            CheckUInt64(707952899, "d4");
            CheckUInt64(99123448, "d4");
            CheckUInt64(415143762, "d4");
            CheckUInt64(174149801, "d4");
            
            // format d5
            CheckUInt64(UInt64.MinValue, "d5");
            CheckUInt64(UInt64.MaxValue, "d5");
            CheckUInt64(0, "d5");
            CheckUInt64(1706237899, "d5");
            CheckUInt64(171532010, "d5");
            CheckUInt64(34973610, "d5");
            CheckUInt64(1158468067, "d5");
            CheckUInt64(897898791, "d5");
        }
        
        [Fact]
        public void UInt64FormatG()
        {
            
            // format G
            CheckUInt64(UInt64.MinValue, "G");
            CheckUInt64(UInt64.MaxValue, "G");
            CheckUInt64(0, "G");
            CheckUInt64(789269341, "G");
            CheckUInt64(875465564, "G");
            CheckUInt64(1153545131, "G");
            CheckUInt64(494471183, "G");
            CheckUInt64(99869064, "G");
        }
        
        [Fact]
        public void UInt64FormatX()
        {
            
            // format X
            CheckUInt64(UInt64.MinValue, "X");
            CheckUInt64(UInt64.MaxValue, "X");
            CheckUInt64(0, "X");
            CheckUInt64(1845533257, "X");
            CheckUInt64(24264049, "X");
            CheckUInt64(790520115, "X");
            CheckUInt64(430621155, "X");
            CheckUInt64(11262143, "X");
            
            // format X0
            CheckUInt64(UInt64.MinValue, "X0");
            CheckUInt64(UInt64.MaxValue, "X0");
            CheckUInt64(0, "X0");
            CheckUInt64(1137212253, "X0");
            CheckUInt64(1521226496, "X0");
            CheckUInt64(1797056127, "X0");
            CheckUInt64(1695478292, "X0");
            CheckUInt64(310999068, "X0");
            
            // format X1
            CheckUInt64(UInt64.MinValue, "X1");
            CheckUInt64(UInt64.MaxValue, "X1");
            CheckUInt64(0, "X1");
            CheckUInt64(587894940, "X1");
            CheckUInt64(95723688, "X1");
            CheckUInt64(702957577, "X1");
            CheckUInt64(2095400459, "X1");
            CheckUInt64(1877049968, "X1");
            
            // format X2
            CheckUInt64(UInt64.MinValue, "X2");
            CheckUInt64(UInt64.MaxValue, "X2");
            CheckUInt64(0, "X2");
            CheckUInt64(1409281778, "X2");
            CheckUInt64(1912885920, "X2");
            CheckUInt64(1409642702, "X2");
            CheckUInt64(369315807, "X2");
            CheckUInt64(157139958, "X2");
            
            // format X3
            CheckUInt64(UInt64.MinValue, "X3");
            CheckUInt64(UInt64.MaxValue, "X3");
            CheckUInt64(0, "X3");
            CheckUInt64(1603765780, "X3");
            CheckUInt64(302127276, "X3");
            CheckUInt64(1269608504, "X3");
            CheckUInt64(474684140, "X3");
            CheckUInt64(1699525228, "X3");
            
            // format X4
            CheckUInt64(UInt64.MinValue, "X4");
            CheckUInt64(UInt64.MaxValue, "X4");
            CheckUInt64(0, "X4");
            CheckUInt64(914718744, "X4");
            CheckUInt64(1209298587, "X4");
            CheckUInt64(1238834334, "X4");
            CheckUInt64(1645807886, "X4");
            CheckUInt64(1457771205, "X4");
            
            // format X5
            CheckUInt64(UInt64.MinValue, "X5");
            CheckUInt64(UInt64.MaxValue, "X5");
            CheckUInt64(0, "X5");
            CheckUInt64(1844907225, "X5");
            CheckUInt64(1513118038, "X5");
            CheckUInt64(1000423878, "X5");
            CheckUInt64(1700258865, "X5");
            CheckUInt64(1743001432, "X5");
        }
        
        [Fact]
        public void UInt64Formatx()
        {
            
            // format x
            CheckUInt64(UInt64.MinValue, "x");
            CheckUInt64(UInt64.MaxValue, "x");
            CheckUInt64(0, "x");
            CheckUInt64(463268808, "x");
            CheckUInt64(1337065267, "x");
            CheckUInt64(1636959719, "x");
            CheckUInt64(1711908591, "x");
            CheckUInt64(1295239406, "x");
            
            // format x0
            CheckUInt64(UInt64.MinValue, "x0");
            CheckUInt64(UInt64.MaxValue, "x0");
            CheckUInt64(0, "x0");
            CheckUInt64(1609388678, "x0");
            CheckUInt64(1058380419, "x0");
            CheckUInt64(551128803, "x0");
            CheckUInt64(104144694, "x0");
            CheckUInt64(1733738508, "x0");
            
            // format x1
            CheckUInt64(UInt64.MinValue, "x1");
            CheckUInt64(UInt64.MaxValue, "x1");
            CheckUInt64(0, "x1");
            CheckUInt64(1610514211, "x1");
            CheckUInt64(1616058080, "x1");
            CheckUInt64(87056798, "x1");
            CheckUInt64(1428901746, "x1");
            CheckUInt64(1636100660, "x1");
            
            // format x2
            CheckUInt64(UInt64.MinValue, "x2");
            CheckUInt64(UInt64.MaxValue, "x2");
            CheckUInt64(0, "x2");
            CheckUInt64(1023867068, "x2");
            CheckUInt64(1613306509, "x2");
            CheckUInt64(784229324, "x2");
            CheckUInt64(337331225, "x2");
            CheckUInt64(643586931, "x2");
            
            // format x3
            CheckUInt64(UInt64.MinValue, "x3");
            CheckUInt64(UInt64.MaxValue, "x3");
            CheckUInt64(0, "x3");
            CheckUInt64(1543405981, "x3");
            CheckUInt64(902139192, "x3");
            CheckUInt64(315835975, "x3");
            CheckUInt64(878579574, "x3");
            CheckUInt64(1244027046, "x3");
            
            // format x4
            CheckUInt64(UInt64.MinValue, "x4");
            CheckUInt64(UInt64.MaxValue, "x4");
            CheckUInt64(0, "x4");
            CheckUInt64(2075397313, "x4");
            CheckUInt64(282392162, "x4");
            CheckUInt64(151248241, "x4");
            CheckUInt64(237707087, "x4");
            CheckUInt64(613575490, "x4");
            
            // format x5
            CheckUInt64(UInt64.MinValue, "x5");
            CheckUInt64(UInt64.MaxValue, "x5");
            CheckUInt64(0, "x5");
            CheckUInt64(1222260549, "x5");
            CheckUInt64(1242783457, "x5");
            CheckUInt64(1150182359, "x5");
            CheckUInt64(352399027, "x5");
            CheckUInt64(1413781160, "x5");
        }
        
        public void CheckInt64(Int64 value, string format)
        {
            var parsed = Format.Parse(format);
            formatter.Clear();
            formatter.Append(value, parsed);
            var result = formatter.ToString();
            var clrResult = value.ToString(format, CultureInfo.InvariantCulture);
            Assert.Equal(clrResult, result);
        }
        
        [Fact]
        public void Int64FormatD()
        {
            
            // format D
            CheckInt64(Int64.MinValue, "D");
            CheckInt64(Int64.MaxValue, "D");
            CheckInt64(0, "D");
            CheckInt64(72216510, "D");
            CheckInt64(-1845217760, "D");
            CheckInt64(695234926, "D");
            CheckInt64(-1898482122, "D");
            CheckInt64(888429278, "D");
            
            // format D0
            CheckInt64(Int64.MinValue, "D0");
            CheckInt64(Int64.MaxValue, "D0");
            CheckInt64(0, "D0");
            CheckInt64(1446144310, "D0");
            CheckInt64(-1957416237, "D0");
            CheckInt64(-433904139, "D0");
            CheckInt64(728888713, "D0");
            CheckInt64(1056671933, "D0");
            
            // format D1
            CheckInt64(Int64.MinValue, "D1");
            CheckInt64(Int64.MaxValue, "D1");
            CheckInt64(0, "D1");
            CheckInt64(-1708613265, "D1");
            CheckInt64(758380144, "D1");
            CheckInt64(-1367325742, "D1");
            CheckInt64(-907132180, "D1");
            CheckInt64(1638052850, "D1");
            
            // format D2
            CheckInt64(Int64.MinValue, "D2");
            CheckInt64(Int64.MaxValue, "D2");
            CheckInt64(0, "D2");
            CheckInt64(367730753, "D2");
            CheckInt64(-1882141420, "D2");
            CheckInt64(1563884148, "D2");
            CheckInt64(1915572397, "D2");
            CheckInt64(-1789579947, "D2");
            
            // format D3
            CheckInt64(Int64.MinValue, "D3");
            CheckInt64(Int64.MaxValue, "D3");
            CheckInt64(0, "D3");
            CheckInt64(1792407507, "D3");
            CheckInt64(1574890342, "D3");
            CheckInt64(-1945366384, "D3");
            CheckInt64(472459573, "D3");
            CheckInt64(-1951286599, "D3");
            
            // format D4
            CheckInt64(Int64.MinValue, "D4");
            CheckInt64(Int64.MaxValue, "D4");
            CheckInt64(0, "D4");
            CheckInt64(-493371837, "D4");
            CheckInt64(-93510427, "D4");
            CheckInt64(-1852651546, "D4");
            CheckInt64(1665029702, "D4");
            CheckInt64(-2001717957, "D4");
            
            // format D5
            CheckInt64(Int64.MinValue, "D5");
            CheckInt64(Int64.MaxValue, "D5");
            CheckInt64(0, "D5");
            CheckInt64(-1785736832, "D5");
            CheckInt64(-1674894608, "D5");
            CheckInt64(-1868763912, "D5");
            CheckInt64(1387584017, "D5");
            CheckInt64(593306723, "D5");
        }
        
        [Fact]
        public void Int64Formatd()
        {
            
            // format d
            CheckInt64(Int64.MinValue, "d");
            CheckInt64(Int64.MaxValue, "d");
            CheckInt64(0, "d");
            CheckInt64(-463511967, "d");
            CheckInt64(-1020996357, "d");
            CheckInt64(554671589, "d");
            CheckInt64(1593822595, "d");
            CheckInt64(-669998812, "d");
            
            // format d0
            CheckInt64(Int64.MinValue, "d0");
            CheckInt64(Int64.MaxValue, "d0");
            CheckInt64(0, "d0");
            CheckInt64(854536941, "d0");
            CheckInt64(509618765, "d0");
            CheckInt64(18106123, "d0");
            CheckInt64(-372365298, "d0");
            CheckInt64(309952688, "d0");
            
            // format d1
            CheckInt64(Int64.MinValue, "d1");
            CheckInt64(Int64.MaxValue, "d1");
            CheckInt64(0, "d1");
            CheckInt64(1230394810, "d1");
            CheckInt64(1855918614, "d1");
            CheckInt64(-459948389, "d1");
            CheckInt64(209264422, "d1");
            CheckInt64(-1068288296, "d1");
            
            // format d2
            CheckInt64(Int64.MinValue, "d2");
            CheckInt64(Int64.MaxValue, "d2");
            CheckInt64(0, "d2");
            CheckInt64(-1713055155, "d2");
            CheckInt64(-1695717940, "d2");
            CheckInt64(-2065946458, "d2");
            CheckInt64(-1706178098, "d2");
            CheckInt64(-1745615635, "d2");
            
            // format d3
            CheckInt64(Int64.MinValue, "d3");
            CheckInt64(Int64.MaxValue, "d3");
            CheckInt64(0, "d3");
            CheckInt64(1752131916, "d3");
            CheckInt64(707337402, "d3");
            CheckInt64(661185115, "d3");
            CheckInt64(1075441637, "d3");
            CheckInt64(-358845198, "d3");
            
            // format d4
            CheckInt64(Int64.MinValue, "d4");
            CheckInt64(Int64.MaxValue, "d4");
            CheckInt64(0, "d4");
            CheckInt64(607903293, "d4");
            CheckInt64(1632342959, "d4");
            CheckInt64(603052105, "d4");
            CheckInt64(-1457784472, "d4");
            CheckInt64(-498521979, "d4");
            
            // format d5
            CheckInt64(Int64.MinValue, "d5");
            CheckInt64(Int64.MaxValue, "d5");
            CheckInt64(0, "d5");
            CheckInt64(1762673457, "d5");
            CheckInt64(1048006940, "d5");
            CheckInt64(-848598712, "d5");
            CheckInt64(-1217356874, "d5");
            CheckInt64(1337615267, "d5");
        }
        
        [Fact]
        public void Int64FormatG()
        {
            
            // format G
            CheckInt64(Int64.MinValue, "G");
            CheckInt64(Int64.MaxValue, "G");
            CheckInt64(0, "G");
            CheckInt64(229345500, "G");
            CheckInt64(-2131205858, "G");
            CheckInt64(760765012, "G");
            CheckInt64(-1978382431, "G");
            CheckInt64(1760156417, "G");
        }
        
        [Fact]
        public void Int64FormatX()
        {
            
            // format X
            CheckInt64(Int64.MinValue, "X");
            CheckInt64(Int64.MaxValue, "X");
            CheckInt64(0, "X");
            CheckInt64(1279389112, "X");
            CheckInt64(839093826, "X");
            CheckInt64(357194497, "X");
            CheckInt64(1192788258, "X");
            CheckInt64(-1662271223, "X");
            
            // format X0
            CheckInt64(Int64.MinValue, "X0");
            CheckInt64(Int64.MaxValue, "X0");
            CheckInt64(0, "X0");
            CheckInt64(-16851576, "X0");
            CheckInt64(784001730, "X0");
            CheckInt64(-265523854, "X0");
            CheckInt64(648211173, "X0");
            CheckInt64(-738949031, "X0");
            
            // format X1
            CheckInt64(Int64.MinValue, "X1");
            CheckInt64(Int64.MaxValue, "X1");
            CheckInt64(0, "X1");
            CheckInt64(-1950272444, "X1");
            CheckInt64(-1228684910, "X1");
            CheckInt64(-1851378461, "X1");
            CheckInt64(-1822007616, "X1");
            CheckInt64(-1614612077, "X1");
            
            // format X2
            CheckInt64(Int64.MinValue, "X2");
            CheckInt64(Int64.MaxValue, "X2");
            CheckInt64(0, "X2");
            CheckInt64(-94377000, "X2");
            CheckInt64(1134465696, "X2");
            CheckInt64(-1215419022, "X2");
            CheckInt64(1704273392, "X2");
            CheckInt64(-1495190169, "X2");
            
            // format X3
            CheckInt64(Int64.MinValue, "X3");
            CheckInt64(Int64.MaxValue, "X3");
            CheckInt64(0, "X3");
            CheckInt64(-1131584760, "X3");
            CheckInt64(876991511, "X3");
            CheckInt64(-674102155, "X3");
            CheckInt64(453323503, "X3");
            CheckInt64(-163715176, "X3");
            
            // format X4
            CheckInt64(Int64.MinValue, "X4");
            CheckInt64(Int64.MaxValue, "X4");
            CheckInt64(0, "X4");
            CheckInt64(-1033449171, "X4");
            CheckInt64(-1676905496, "X4");
            CheckInt64(1784497571, "X4");
            CheckInt64(-709246635, "X4");
            CheckInt64(1431153168, "X4");
            
            // format X5
            CheckInt64(Int64.MinValue, "X5");
            CheckInt64(Int64.MaxValue, "X5");
            CheckInt64(0, "X5");
            CheckInt64(-232801365, "X5");
            CheckInt64(2000696068, "X5");
            CheckInt64(2046293677, "X5");
            CheckInt64(1972057577, "X5");
            CheckInt64(182872126, "X5");
        }
        
        [Fact]
        public void Int64Formatx()
        {
            
            // format x
            CheckInt64(Int64.MinValue, "x");
            CheckInt64(Int64.MaxValue, "x");
            CheckInt64(0, "x");
            CheckInt64(-1799458600, "x");
            CheckInt64(-1654729867, "x");
            CheckInt64(-1500194637, "x");
            CheckInt64(-1954154689, "x");
            CheckInt64(1141272962, "x");
            
            // format x0
            CheckInt64(Int64.MinValue, "x0");
            CheckInt64(Int64.MaxValue, "x0");
            CheckInt64(0, "x0");
            CheckInt64(1064738201, "x0");
            CheckInt64(1039388759, "x0");
            CheckInt64(35426240, "x0");
            CheckInt64(-1659991749, "x0");
            CheckInt64(1421705331, "x0");
            
            // format x1
            CheckInt64(Int64.MinValue, "x1");
            CheckInt64(Int64.MaxValue, "x1");
            CheckInt64(0, "x1");
            CheckInt64(1262978930, "x1");
            CheckInt64(-629289440, "x1");
            CheckInt64(708472016, "x1");
            CheckInt64(2043803599, "x1");
            CheckInt64(1445618207, "x1");
            
            // format x2
            CheckInt64(Int64.MinValue, "x2");
            CheckInt64(Int64.MaxValue, "x2");
            CheckInt64(0, "x2");
            CheckInt64(-1593215591, "x2");
            CheckInt64(-550042584, "x2");
            CheckInt64(1900025364, "x2");
            CheckInt64(1468699825, "x2");
            CheckInt64(-1923149686, "x2");
            
            // format x3
            CheckInt64(Int64.MinValue, "x3");
            CheckInt64(Int64.MaxValue, "x3");
            CheckInt64(0, "x3");
            CheckInt64(-789055523, "x3");
            CheckInt64(-29929397, "x3");
            CheckInt64(2069361883, "x3");
            CheckInt64(-1097779214, "x3");
            CheckInt64(557969569, "x3");
            
            // format x4
            CheckInt64(Int64.MinValue, "x4");
            CheckInt64(Int64.MaxValue, "x4");
            CheckInt64(0, "x4");
            CheckInt64(1462413526, "x4");
            CheckInt64(451060788, "x4");
            CheckInt64(1325286650, "x4");
            CheckInt64(105962775, "x4");
            CheckInt64(-1236687281, "x4");
            
            // format x5
            CheckInt64(Int64.MinValue, "x5");
            CheckInt64(Int64.MaxValue, "x5");
            CheckInt64(0, "x5");
            CheckInt64(-156936469, "x5");
            CheckInt64(586122107, "x5");
            CheckInt64(-987856999, "x5");
            CheckInt64(539050322, "x5");
            CheckInt64(310070040, "x5");
        }
        
    }
}
